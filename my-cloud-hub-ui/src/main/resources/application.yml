server:
  port: 8080 # ??? BFF ????? 8080 ??

spring:
  security:
    oauth2:
      client:
#        registration:
#          # ???????????????
#          my-cloud-hub-ui:
#            provider: auth-server # ??????? provider
#            client-id: my-cloud-hub-ui # ??? auth-server-spring ???? clientId ??
#            client-secret: secret # ??? auth-server-spring ???? clientSecret ??
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}" # Spring ?????
#            scope: openid, read, write
#        provider:
#          # ?????? 'auth-server' ? provider?????? auth-server-spring
#          auth-server:
#            issuer-uri: http://127.0.0.1:9000
        registration:
          my-cloud-hub-ui:
            provider: keycloak # 將 provider 名稱改為 keycloak
            client-id: my-cloud-hub-ui
            # 將這裡的 secret 換成您剛剛從 Keycloak UI 複製的 Client Secret
            client-secret: 7DCTZmyLRKW7k3j7mVVlCyNU80MhYGDT
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid, profile, email, roles # Keycloak 預設的 scope
        provider:
            # 定義一個名為 'keycloak' 的 provider
          keycloak:
              # issuer-uri 指向您在 Keycloak 建立的 Realm
            issuer-uri: http://localhost:8180/realms/oauth2-showcase

logging:
  level:
    root: INFO
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: TRACE
    org.springframework.web: DEBUG
    com.example.mycloudhubui: DEBUG
